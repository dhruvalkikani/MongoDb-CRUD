// MongoDB CRUD Queries for Order Management System
// Assignment: L1 Order Management Using MongoDB Database

// First, insert the sample data into the orders collection:
db.orders.insertMany([
  {
    "order_id": 1,
    "customer_name": "John Doe",
    "items": ["Laptop", "Mouse"],
    "total_amount": 65000,
    "order_status": "pending"
  },
  {
    "order_id": 2,
    "customer_name": "Jane Smith",
    "items": ["Headphones", "Charger"],
    "total_amount": 3000,
    "order_status": "shipped"
  },
  {
    "order_id": 3,
    "customer_name": "Alice Johnson",
    "items": ["Mobile Phone"],
    "total_amount": 20000,
    "order_status": "delivered"
  },
  {
    "order_id": 4,
    "customer_name": "Bob Brown",
    "items": ["Tablet", "Keyboard"],
    "total_amount": 15000,
    "order_status": "pending"
  },
  {
    "order_id": 5,
    "customer_name": "Chris Green",
    "items": ["Smartwatch"],
    "total_amount": 7000,
    "order_status": "shipped"
  }
])

// ===== ASSIGNMENT QUERIES =====

// 1. Retrieve all orders with the order_status "shipped"
db.orders.find({ "order_status": "shipped" })

// 2. Update the total_amount of the order with order_id: 1 to 70000
db.orders.updateOne(
  { "order_id": 1 }, 
  { $set: { "total_amount": 70000 } }
)

// 3. Delete the order with order_id: 4
db.orders.deleteOne({ "order_id": 4 })

// 4. Retrieve the order with the customer_name: "Alice Johnson"
db.orders.find({ "customer_name": "Alice Johnson" })

// 5. Update the order_status of the order with order_id: 2 to "delivered"
db.orders.updateOne(
  { "order_id": 2 }, 
  { $set: { "order_status": "delivered" } }
)

// 6. Retrieve all orders with a total_amount greater than or equal to 15000
db.orders.find({ "total_amount": { $gte: 15000 } })

// ===== END OF QUERIES =====
